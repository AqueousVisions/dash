---
title: "NYCTaxi"
author: "이민지(2023-202046394)"
format: dashboard
execute:
  enabled: true
  cache: false
  freeze: false
---
'''{python}
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.io as pio
import json
import requests
import pickle
'''

'''{python}
pd.options.plotting.backend = "plotly"
pio.templates.default = "plotly_white"
'''

'''{python}
df = pd.read_csv("https://raw.githubusercontent.com/guebin/DV2023/main/posts/NYCTaxi.csv").assign(
    log_trip_duration = lambda df: np.log(df.trip_duration),
    pickup_datetime = lambda df: df.pickup_datetime.apply(pd.to_datetime),
    dropoff_datetime = lambda df: df.dropoff_datetime.apply(pd.to_datetime),
    dist = lambda df: np.sqrt((df.pickup_latitude-df.dropoff_latitude)**2 + (df.pickup_longitude-df.dropoff_longitude)**2),
    #---#
    vendor_id = lambda df: df.vendor_id.map({1:'A',2:'B'})
).assign(
    speed = lambda df: df.dist / df.trip_duration,
    pickup_hour = lambda df: df.pickup_datetime.dt.hour,
    dropoff_hour = lambda df: df.dropoff_datetime.dt.hour,
    dayofweek = lambda df: df.pickup_datetime.dt.dayofweek
)
df_small = df[::100].reset_index(drop=True)
'''
'''{python}
#기말고사 1-(1),(2),(3)
# | title: 요일,시간에 따른 평균속력 시각화  

# 규칙에 따라 요일 변환
dayofweek_mapping = {0: '월', 1: '화', 2: '수', 3: '목', 4: '금', 5: '토', 6: '일'}
df['dayofweek'] = df['dayofweek'].map(dayofweek_mapping)

# (요일, 시간)에 따른 평균속력 계산
average_speed_data = df.groupby(['dayofweek', 'pickup_hour'])['speed'].mean().reset_index()

# 대시보드 시각화 (X축 라벨 및 Y축 순서 수정)
fig = px.density_heatmap(
    data_frame=average_speed_data,
    x='pickup_hour',
    y='dayofweek',
    z='speed',
    nbinsx=24,
    nbinsy=7,
    height=300,
    labels={'pickup_hour': 'Pickup 시간', 'dayofweek': '요일', 'speed': '평균속력'},
    title='요일, 시간에 따른 평균속력 시각화',
    category_orders={'dayofweek': ['일', '토', '금', '목', '수', '화', '월']}
)

# 그래프 표시
fig.show()
'''

'''{python}
# | title: 요일,시간에 따른 평균이동거리 시각화 
# 데이터 전처리
df = pd.read_csv("https://raw.githubusercontent.com/guebin/DV2023/main/posts/NYCTaxi.csv").assign(
    log_trip_duration=lambda df: np.log(df.trip_duration),
    pickup_datetime=lambda df: pd.to_datetime(df.pickup_datetime),
    dropoff_datetime=lambda df: pd.to_datetime(df.dropoff_datetime),
    dist=lambda df: np.sqrt((df.pickup_latitude - df.dropoff_latitude) ** 2 + (df.pickup_longitude - df.dropoff_longitude) ** 2),
    vendor_id=lambda df: df.vendor_id.map({1: 'A', 2: 'B'})
).assign(
    pickup_hour=lambda df: df.pickup_datetime.dt.hour,
    dayofweek=lambda df: df.pickup_datetime.dt.dayofweek
)

# 규칙에 따라 요일 변환
dayofweek_mapping = {0: '월', 1: '화', 2: '수', 3: '목', 4: '금', 5: '토', 6: '일'}
df['dayofweek'] = df['dayofweek'].map(dayofweek_mapping)

# (요일, 시간)에 따른 평균 이동거리 계산
average_distance_data = df.groupby(['dayofweek', 'pickup_hour'])['dist'].mean().reset_index()

# 대시보드 시각화 (X축 라벨 및 Y축 순서 수정)
fig = px.density_heatmap(
    data_frame=average_distance_data,
    x='pickup_hour',
    y='dayofweek',
    z='dist',
    nbinsx=24,
    nbinsy=7,
    height=300,
    labels={'pickup_hour': 'Pickup 시간', 'dayofweek': '요일', 'dist': '평균이동거리'},
    title='요일, 시간에 따른 평균이동거리 시각화',
    category_orders={'dayofweek': ['일', '토', '금', '목', '수', '화', '월']},
    color_continuous_scale='Viridis',  # 원하는 색상 스케일로 변경
)

# 그래프 표시
fig.show()
'''

'''{python}
# 기말고사1-(3)# | title: 속력별 경로 시각화
# 속력을 quatile에 따라 4개의 구간으로 나누기
df_small['speed_category'] = pd.qcut(df_small['speed'], q=4, labels=['매우느림', '조금느림', '조금빠름', '매우빠름'])

# Zoom 및 기타 설정
zoom_level = 11

# 대시보드 시각화
fig = px.line_mapbox(
    data_frame=df_small,
    lat='dropoff_latitude',
    lon='dropoff_longitude',
    color='speed_category',
    line_group='id',
    mapbox_style='carto-positron',
    zoom=zoom_level,
    width=750,
    height=600
)

# 산점도 추가
scatter_data = px.scatter_mapbox(
    data_frame=df_small,
    lat='dropoff_latitude',
    lon='dropoff_longitude',
    size='passenger_count',
    size_max=10,
    color='speed_category',
    mapbox_style='carto-positron',
    zoom=zoom_level,
    width=750,
    height=600
).data

for sd in scatter_data:
    fig.add_trace(sd)

# 시각화 설정 업데이트
fig.update_traces(
    line={'width': 1},
    opacity=0.8
)

# 그래프 표시
fig.show(config={'scrollZoom': False})# 속력을 quatile에 따라 4개의 구간으로 나누기
df_small['speed_category'] = pd.qcut(df_small['speed'], q=4, labels=['매우느림', '조금느림', '조금빠름', '매우빠름'])


'''


